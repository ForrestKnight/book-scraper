import { CommonDataTypes, Script } from '../../../protocol/protocol.js';
import { CdpTarget } from './cdpTarget.js';
export type BidiPreloadScript = {
    /** BiDi ID, an automatically generated UUID. */
    id: string;
    /** CDP preload scripts. */
    cdpPreloadScripts: CdpPreloadScript[];
    /** The script itself, in a format expected by the spec i.e. a function. */
    functionDeclaration: string;
    /** The script sandbox / world name. */
    sandbox?: string;
    /** Browsing context ID. */
    contextId: CommonDataTypes.BrowsingContext | null;
};
/** BidiPreloadScripts can be filtered by either context ID or BiDi ID. */
export type BidiPreloadScriptFilter = Partial<Pick<BidiPreloadScript, 'contextId'> & Pick<BidiPreloadScript, 'id'>> & {
    contextIds?: (CommonDataTypes.BrowsingContext | null)[];
};
export type CdpPreloadScript = {
    /** CDP target. Includes session ID and target ID. */
    target: CdpTarget;
    /** CDP preload script ID. */
    preloadScriptId: Script.PreloadScript;
};
/** CdpPreloadScripts can be filtered by CDP session ID or target ID. */
export type CdpPreloadScriptFilter = {
    /** CDP session ID. */
    sessionId?: string;
    /** CDP target ID. */
    targetId?: string;
};
/**
 * Container class for preload scripts.
 *
 * BiDi IDs are generated by the server and are unique within the context.
 *
 * CDP preload script IDs are generated by the client and are unique
 * within the session.
 *
 * The mapping between BiDi and CDP preload script IDs is 1:many.
 * BiDi IDs are needed by the mapper to keep track of potential multiple CDP IDs
 * in the client.
 *
 * This class does not concern itself with the validity of the IDs.
 */
export declare class PreloadScriptStorage {
    #private;
    /** Finds all entries that match the given filter. */
    findPreloadScripts(filter?: BidiPreloadScriptFilter): BidiPreloadScript[];
    /**
     * Keeps track of the given CDP preload scripts associated with the given
     * browsing context ID.
     *
     * @param contextId Browsing context ID, or null for global context.
     * @param cdpPreloadScripts CDP preload scripts.
     * @param functionDeclaration The script itself, in a format expected by the spec
     *   i.e. a function.
     */
    addPreloadScripts(contextId: CommonDataTypes.BrowsingContext | null, cdpPreloadScripts: CdpPreloadScript[], functionDeclaration: string, sandbox?: string): BidiPreloadScript;
    /**
     * Keeps track of the given CDP preload script in the given BiDi preload
     * script.
     */
    appendCdpPreloadScript(script: BidiPreloadScript, cdpPreloadScript: CdpPreloadScript): void;
    /** Deletes all BiDi preload script entries that match the given filter. */
    removeBiDiPreloadScripts(filter?: BidiPreloadScriptFilter): void;
    /** Deletes all CDP preload script entries that match the given filter. */
    removeCdpPreloadScripts(filter?: CdpPreloadScriptFilter): void;
}
