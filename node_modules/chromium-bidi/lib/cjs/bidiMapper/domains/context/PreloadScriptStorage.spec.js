"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2023 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const chai_1 = require("chai");
const sinon_1 = __importDefault(require("sinon"));
const PreloadScriptStorage_1 = require("./PreloadScriptStorage");
// TODO: expand unit tests.
describe('PreloadScriptStorage', () => {
    let preloadScriptStorage;
    beforeEach(() => {
        preloadScriptStorage = new PreloadScriptStorage_1.PreloadScriptStorage();
    });
    it('initial state', () => {
        (0, chai_1.expect)(preloadScriptStorage.findPreloadScripts()).to.be.empty;
        (0, chai_1.expect)(preloadScriptStorage.findPreloadScripts({})).to.be.empty;
        (0, chai_1.expect)(preloadScriptStorage.findPreloadScripts({
            id: '',
        })).to.be.empty;
        (0, chai_1.expect)(preloadScriptStorage.findPreloadScripts({
            contextId: null,
        })).to.be.empty;
        (0, chai_1.expect)(preloadScriptStorage.findPreloadScripts({
            contextId: '',
        })).to.be.empty;
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
});
//# sourceMappingURL=PreloadScriptStorage.spec.js.map